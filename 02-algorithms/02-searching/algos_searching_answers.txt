1. Given the alphabetically sorted collection in this checkpoint, how many
iterations would it take to find the value G using linear search?
7 iterations

2. Given the alphabetically sorted collection in this checkpoint, how many
iterations would it take to find the value G using binary search?
3 iterations

3. Calculate fib(10), fib(11), fib(12) by hand.
fib(10) = fib(9) + fib(8) = 34 + 21 = 55

fib(11) = fib(10) + fib(9) = 55 + 34 = 89

fib(12) = fib(11) + fib(10) = 89 + 55 = 144

4.  Fibonacci Recursive vs. Iterative:
            user       system     total    real
Recursive:  0.000000   0.000000   0.000000 (  0.001283)
Iterative:  0.000000   0.000000   0.000000 (  0.000007)

5. Given an unsorted collection of a million items, which algorithm would you
choose between linear search and binary search? Would you use an iterative or
recursive solution? Explain your reasoning.
I would choose linear search because the list would first need to be sorted
to use binary search.  I would use iterative since it generally runs faster
than recursive solutions.  

6. Given a sorted collection of a million items, which algorithm would you
choose between linear search and binary search? Would you use an iterative or
recursive solution? Explain your reasoning.
I would choose a binary search.  For the worse case,
binary search performance is O(log(n)), while the iterative solution worse case
is O(n).  I would also use an iterative solution.  After some basic research,
both approaches will have the same complexity, but the iterative solution will
take up less space in the worse case - O(1) vs. recursive worse case space
complexity of O(log(n)).  But I would be tempted to use recursion anyway
because I actually find it to be a more elegant solution.
